# The trigonometric function cosine has the following Taylor expansion

.data
	inInt: .asciiz "Give a degree to cos(x): "
	pi: .float 3.14159265359
	number1: .float 1.0
	number0: .float 0
	degree: .float 180
	

.text
big_loop:
	li $v0, 4
	la $a0, inInt
	syscall
	
	li $v0, 5
	syscall
	
	move $t0, $v0
	li $t1, -1
	beq $t0 , $t1, exit
	
	mtc1 $t0, $f2
	cvt.s.w $f2, $f2
	
	l.s $f1, pi
	l.s $f3, degree
	
	
	mul.s $f12, $f2, $f1
	div.s $f12, $f12, $f3
	
	li $t3, 0 #exponent
	l.s $f4, number1 #base
	l.s $f5, number1
	l.s $f6, number0 #result - power
	l.s $f8, number1 #fact
	l.s $f9, number1 #addi + 1
	l.s $f0, number0 # result1
	li $t4, 0 #counter
	li $t5, 2 
	li $t9, 14 
	li $t8, 0
	
	
loop: 
	beq $t8, $t9, print
	l.s $f5, number1 #result - power
	l.s $f8, number1 #fact
	l.s $f7, number1 #  for(i=1;
	move $t3, $t8
	jal power
	

next:	div.s $f11, $f5, $f8
	div $t4, $t5
	mfhi $t6
	beq $t6, 0, addd
	beq $t6, 1, subb
	
next1:	
	addi $t8, $t8, 2 # exponent
	add.s $f6, $f6, $f9 # factorial + 1
	add.s $f6, $f6, $f9 # factorial + 1
	addi $t4, $t4, 1
	j loop
	
addd:
	add.s $f0, $f0, $f11
	j next1
subb:
	sub.s $f0, $f0, $f11
	j next1
		
power: 	
	beqz $t3, factorial #  while (exponent != 0)
	mul.s $f5, $f5, $f12 # result *= base;
	subi $t3, $t3, 1 # --exponent;
	j power

	
factorial: 
	c.le.s  $f7, $f6 #i<=number;
	bc1f next
	mul.s $f8, $f8, $f7 # fact=fact*i;   
	add.s $f7, $f7, $f9 #i++  
	j factorial
	
exit:
 	li $v0, 10
 	syscall

print:
 	li $v0, 2
 	mov.s $f12, $f0
 	syscall
 	
 	li $v0, 11
 	li $a0, '\n'
 	syscall
 	
 	j big_loop
  
	
	
	
	

	
	
	
	

